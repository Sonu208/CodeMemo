
import java.awt.Dialog;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * @author SONU
 */
public class UI extends javax.swing.JFrame {
    
    StringBuffer content;
    boolean controlFlag,saveFlag,fileNameFlag;
    BufferedReader br;
    File f;
    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        this.setTitle("Encrypted Notepad");
        this.content = new StringBuffer();
        this.textArea.setLineWrap(true);
        this.fileNameFlag = false; 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        jMenuBar1.setBackground(new java.awt.Color(10, 10, 10));
        jMenuBar1.setForeground(new java.awt.Color(255, 255, 255));

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        newFile.setText("New");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        jMenu1.add(newFile);

        open.setMnemonic('c');
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        save.setText("save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Format");
        jMenuBar1.add(jMenu4);

        jMenu5.setText("View");
        jMenuBar1.add(jMenu5);

        jMenu6.setText("Help");
        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
            if(!saveFlag)
            {
                System.out.println("dialog will open ");
                int choice = JOptionPane.showConfirmDialog(this,"Current File is not saved Are You Sure Want to Open a new File");
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            new UI().setVisible(true);
                        }
                    });
            }
    }//GEN-LAST:event_newFileActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
            
    }//GEN-LAST:event_formKeyPressed

    private void textAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyPressed
        if(evt.getKeyCode() == evt.VK_CONTROL)
        {
            this.controlFlag = true;
        }
        else if(controlFlag && evt.getKeyCode() == evt.VK_S)
        System.out.println("True");
        else
        this.controlFlag = false;
        this.saveFlag = false;

    }//GEN-LAST:event_textAreaKeyPressed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
            JFileChooser fileChooser = new JFileChooser();
            StringBuffer data = new StringBuffer();
            String s;
            int status = fileChooser.showOpenDialog(this);
            if(status == JFileChooser.APPROVE_OPTION)
            {
                
                System.out.println("Open a file");
                 f = fileChooser.getSelectedFile();
                
                String filename = f.toString();
                String extension = filename.substring(f.toString().lastIndexOf(".")+1,filename.length());
                String key = "";
                if(("crypt").equals(extension))
                {
                    key = JOptionPane.showInputDialog(this,"Enter 16 character key to Decrypt the file");
                    while(key.length() != 16)
                    {
                        key = JOptionPane.showInputDialog(this,"Kindly enter key of 16 character");
                    }
                    
                }
                try
                {
                    br = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
                    s= br.readLine();
                    while(s!=null)
                    {
                        data.append(s);
//                        data.append("\n");
                        s = br.readLine();
                    }
                    if(("crypt").equals(extension) && key.length() == 16)
                    {
                        System.out.println("Key -> " + key);
                        
                         DESDemo des = new DESDemo();    
                         this.textArea.setText(des.getDecryptedMessage(data.toString(),key));
                    }
                    else
                    {
                        this.textArea.setText(data.toString());
                    }
                  
                }
                catch(IOException e)
                {
                    e.printStackTrace();
                }
            }
    }//GEN-LAST:event_openActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        System.out.println("save pressed");       
        String content = textArea.getText();
        String key = "";
        String encryptedContent ;
        String extension = "";
//        content = new DESDemo().getEncryptedMessage(content,key);
        
        if(f == null)
        {
            JFileChooser fileChooser = new JFileChooser();   
            int status = fileChooser.showSaveDialog(this);
            if(status == JFileChooser.APPROVE_OPTION)
            {
                String fileName = fileChooser.getSelectedFile()+"";
                extension = fileName.substring(fileName.lastIndexOf('.')+1);
                f = new File(fileName);
//                System.out.println(extension);
//                System.out.println(fileChooser.getCurrentDirectory());
//                System.out.println(filter.getDescription());
//                System.out.println(fileChooser.getSelectedFile());
                if(extension.equals("crypt"))
                {
                    key = JOptionPane.showInputDialog(this,"Enter 16 character key to Encrypt the file");
                    if(key == null)
                    {    f = null;
                    }
                    else
                    {
                        encryptedContent = new DESDemo().getEncryptedMessage(content,key);
                        System.out.println("Encrypted Content" + encryptedContent);
                         try
                        {
                            FileWriter fw = new FileWriter(f,true);
                            for(int i=0;i<encryptedContent.length();i++)
                            {
                                fw.write(encryptedContent.charAt(i));
                            }
                            fw.flush();
                        }
                        catch(IOException e)
                        {
                            
                        } 
                    }
                    
//                    while(key.length() != 16)
//                    {
//                        key = JOptionPane.showInputDialog(this,"kindly Enter 16 character key to Encrypt the file");
//                    }
//                    if(key == "")
//                    {    
//                        System.out.println("User has pressed cancel option");
//                    }
                    
//                    
                }   
                else
                {
                        try
                        {
                            FileWriter fw = new FileWriter(f,true);
                            for(int i=0;i<content.length();i++)
                            {
                                fw.write(content.charAt(i));
                            }
                            fw.flush();
                        }
                        catch(IOException e)
                        {
                            
                        } 
                }
            }
        }
        else
        {
            extension = f.toString().substring(f.toString().lastIndexOf('.')+1);
            if(extension.equals("crypt"))
                {
                    key = JOptionPane.showInputDialog(this,"Enter 16 character key to Encrypt the file");
                    if(key == null)
                    {    f = null;
                    }
                    else
                    {
                        encryptedContent = new DESDemo().getEncryptedMessage(content,key);
                        System.out.println("Encrypted Content" + encryptedContent);
                         try
                        {
                            FileWriter fw = new FileWriter(f);
                            for(int i=0;i<encryptedContent.length();i++)
                            {
                                fw.write(encryptedContent.charAt(i));
                            }
                            fw.flush();
                        }
                        catch(IOException e)
                        {
                            
                        } 
                    }
                }    
        }
    }//GEN-LAST:event_saveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem save;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
